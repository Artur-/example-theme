/**
 * This file has been autogenerated as it didn't exist or was made for an older incompatible version.
 * This file can be used for manual configuration will not be modified if the flowDefaults constant exists.
 */
const fs = require("fs");
const path = require("path");
const merge = require("webpack-merge");
const flowDefaults = require("./webpack.generated.js");
const camelCase = require("change-case").camelCase;
const glob = require("glob");

const dir = "src/main/resources/META-INF/resources/theme";
const themeFolder = path.resolve(__dirname, dir);

module.exports = merge(flowDefaults, {
  resolve: {
    alias: {
      Theme: themeFolder,
    },
  },
});

// Generate theme file(s)

const generateThemeFile = (themeFolder, themeName) => {
  const globalFiles = glob.sync("*.css", {
    cwd: themeFolder,
    nodir: true,
  });
  const componentsFiles = glob.sync("*.css", {
    cwd: path.resolve(themeFolder, "components"),
    nodir: true,
  });

  let themeFile = `
import { css, unsafeCSS } from "lit-element";
import { registerStyles } from "@vaadin/vaadin-themable-mixin/register-styles";
export const injectGlobalCss = (css) => {
  // FIXME: not all browsers support constructable stylesheets
  const sheet = new CSSStyleSheet();
  sheet.replaceSync(css);
  document.adoptedStyleSheets = [sheet];
};
`;
  globalFiles.forEach((global) => {
    const filename = path.basename(global);
    const variable = camelCase(filename);
    themeFile += `import ${variable} from "./${filename}";
injectGlobalCss(${variable});
`;
  });

  componentsFiles.forEach((componentCss) => {
    const filename = path.basename(componentCss);
    const tag = filename.replace(".css", "");
    const variable = camelCase(filename);
    themeFile += `import ${variable} from "./components/${filename}";
registerStyles(
  "${tag}",
  css\`
    \${unsafeCSS(${variable})}
  \`
);
  
`;
  });

  return themeFile;
};
const handleThemes = (themesFolder) => {
  const dir = fs.opendirSync(themesFolder);
  // console.log(dir);
  while ((dirent = dir.readSync())) {
    const themeName = dirent.name;
    const themeFolder = path.resolve(themesFolder, themeName);
    const themeFile = generateThemeFile(themeFolder, themeName);
    fs.writeFileSync(path.resolve(themeFolder, themeName + ".js"), themeFile);
  }
};

handleThemes(themeFolder);
